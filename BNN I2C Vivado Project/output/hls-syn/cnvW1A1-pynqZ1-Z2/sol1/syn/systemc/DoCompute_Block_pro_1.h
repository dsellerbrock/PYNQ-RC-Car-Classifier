// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _DoCompute_Block_pro_1_HH_
#define _DoCompute_Block_pro_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "BlackBoxJam_mul_3CeG.h"

namespace ap_rtl {

struct DoCompute_Block_pro_1 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > numReps_dout;
    sc_in< sc_logic > numReps_empty_n;
    sc_out< sc_logic > numReps_read;
    sc_out< sc_lv<32> > tmp_70_out_out_din;
    sc_in< sc_logic > tmp_70_out_out_full_n;
    sc_out< sc_logic > tmp_70_out_out_write;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    DoCompute_Block_pro_1(sc_module_name name);
    SC_HAS_PROCESS(DoCompute_Block_pro_1);

    ~DoCompute_Block_pro_1();

    sc_trace_file* mVcdFile;

    BlackBoxJam_mul_3CeG<1,5,32,8,32>* BlackBoxJam_mul_3CeG_U253;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > numReps_blk_n;
    sc_signal< sc_logic > tmp_70_out_out_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > numReps_read_reg_40;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > grp_fu_35_p2;
    sc_signal< sc_lv<32> > tmp_70_i_reg_45;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<8> > grp_fu_35_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_64;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_fu_35_p1();
    void thread_numReps_blk_n();
    void thread_numReps_read();
    void thread_tmp_70_out_out_blk_n();
    void thread_tmp_70_out_out_din();
    void thread_tmp_70_out_out_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
