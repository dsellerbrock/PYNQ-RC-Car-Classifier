// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "StreamingMaxPool.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic StreamingMaxPool::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic StreamingMaxPool::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> StreamingMaxPool::ap_ST_fsm_state1 = "1";
const sc_lv<13> StreamingMaxPool::ap_ST_fsm_state2 = "10";
const sc_lv<13> StreamingMaxPool::ap_ST_fsm_state3 = "100";
const sc_lv<13> StreamingMaxPool::ap_ST_fsm_state4 = "1000";
const sc_lv<13> StreamingMaxPool::ap_ST_fsm_state5 = "10000";
const sc_lv<13> StreamingMaxPool::ap_ST_fsm_state6 = "100000";
const sc_lv<13> StreamingMaxPool::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> StreamingMaxPool::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> StreamingMaxPool::ap_ST_fsm_pp0_stage0 = "100000000";
const sc_lv<13> StreamingMaxPool::ap_ST_fsm_pp0_stage1 = "1000000000";
const sc_lv<13> StreamingMaxPool::ap_ST_fsm_state13 = "10000000000";
const sc_lv<13> StreamingMaxPool::ap_ST_fsm_pp1_stage0 = "100000000000";
const sc_lv<13> StreamingMaxPool::ap_ST_fsm_state17 = "1000000000000";
const bool StreamingMaxPool::ap_const_boolean_1 = true;
const sc_lv<32> StreamingMaxPool::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> StreamingMaxPool::ap_const_lv32_9 = "1001";
const bool StreamingMaxPool::ap_const_boolean_0 = false;
const sc_lv<1> StreamingMaxPool::ap_const_lv1_0 = "0";
const sc_lv<32> StreamingMaxPool::ap_const_lv32_8 = "1000";
const sc_lv<32> StreamingMaxPool::ap_const_lv32_7 = "111";
const sc_lv<32> StreamingMaxPool::ap_const_lv32_B = "1011";
const sc_lv<1> StreamingMaxPool::ap_const_lv1_1 = "1";
const sc_lv<32> StreamingMaxPool::ap_const_lv32_A = "1010";
const sc_lv<4> StreamingMaxPool::ap_const_lv4_0 = "0000";
const sc_lv<32> StreamingMaxPool::ap_const_lv32_6 = "110";
const sc_lv<32> StreamingMaxPool::ap_const_lv32_C = "1100";
const sc_lv<5> StreamingMaxPool::ap_const_lv5_0 = "00000";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_1 = "1";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_2 = "10";
const sc_lv<32> StreamingMaxPool::ap_const_lv32_1 = "1";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_3 = "11";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_4 = "100";
const sc_lv<32> StreamingMaxPool::ap_const_lv32_2 = "10";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_5 = "101";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_6 = "110";
const sc_lv<32> StreamingMaxPool::ap_const_lv32_3 = "11";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_7 = "111";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_8 = "1000";
const sc_lv<32> StreamingMaxPool::ap_const_lv32_4 = "100";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_9 = "1001";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_A = "1010";
const sc_lv<32> StreamingMaxPool::ap_const_lv32_5 = "101";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_B = "1011";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_C = "1100";
const sc_lv<64> StreamingMaxPool::ap_const_lv64_D = "1101";
const sc_lv<4> StreamingMaxPool::ap_const_lv4_E = "1110";
const sc_lv<4> StreamingMaxPool::ap_const_lv4_1 = "1";
const sc_lv<5> StreamingMaxPool::ap_const_lv5_1C = "11100";
const sc_lv<5> StreamingMaxPool::ap_const_lv5_1 = "1";

StreamingMaxPool::StreamingMaxPool(sc_module_name name) : sc_module(name), mVcdFile(0) {
    buf_V_U = new StreamingMaxPool_rcU("buf_V_U");
    buf_V_U->clk(ap_clk);
    buf_V_U->reset(ap_rst);
    buf_V_U->address0(buf_V_address0);
    buf_V_U->ce0(buf_V_ce0);
    buf_V_U->we0(buf_V_we0);
    buf_V_U->d0(ap_var_for_const0);
    buf_V_U->q0(buf_V_q0);
    buf_V_U->address1(buf_V_address1);
    buf_V_U->ce1(buf_V_ce1);
    buf_V_U->we1(buf_V_we1);
    buf_V_U->d1(buf_V_d1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( exitcond_flatten_reg_360 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( exitcond_flatten_reg_360 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_reg_360 );

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_reg_360 );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_01001);
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_5_reg_396_pp1_iter1_reg );

    SC_METHOD(thread_ap_block_pp1_stage0_11001);
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_5_reg_396_pp1_iter1_reg );

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_5_reg_396_pp1_iter1_reg );

    SC_METHOD(thread_ap_block_state10_pp0_stage1_iter0);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( exitcond_flatten_reg_360 );

    SC_METHOD(thread_ap_block_state11_pp0_stage0_iter1);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( exitcond_flatten_reg_360 );

    SC_METHOD(thread_ap_block_state12_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state14_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state15_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state16_pp1_stage0_iter2);
    sensitive << ( out_V_V_full_n );
    sensitive << ( tmp_5_reg_396_pp1_iter1_reg );

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state9);
    sensitive << ( exitcond_flatten_fu_288_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state14);
    sensitive << ( tmp_5_fu_334_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_3_fu_276_p2 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_phi_mux_indvar_flatten_phi_fu_247_p4);
    sensitive << ( exitcond_flatten_reg_360 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_243 );
    sensitive << ( indvar_flatten_next_reg_364 );

    SC_METHOD(thread_ap_phi_mux_xp_phi_fu_258_p4);
    sensitive << ( exitcond_flatten_reg_360 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( xp_reg_254 );
    sensitive << ( xp_1_reg_386 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_3_fu_276_p2 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_buf_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_2_fu_314_p1 );
    sensitive << ( tmp_8_fu_346_p1 );

    SC_METHOD(thread_buf_V_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( buf_V_addr_2_reg_380 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( buf_V_addr_1_reg_405 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_buf_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_buf_V_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_buf_V_d1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_7_reg_391 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_buf_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_buf_V_we1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_5_reg_396 );
    sensitive << ( exitcond_flatten_reg_360_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_exitcond_flatten_fu_288_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_indvar_flatten_phi_fu_247_p4 );

    SC_METHOD(thread_in_V_V_blk_n);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( exitcond_flatten_reg_360 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_in_V_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_reg_360 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_indvar_flatten_next_fu_294_p2);
    sensitive << ( ap_phi_mux_indvar_flatten_phi_fu_247_p4 );

    SC_METHOD(thread_out_V_V_blk_n);
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_5_reg_396_pp1_iter1_reg );

    SC_METHOD(thread_out_V_V_din);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_5_reg_396_pp1_iter1_reg );
    sensitive << ( tmp_V_5_reg_411 );
    sensitive << ( ap_block_pp1_stage0_01001 );

    SC_METHOD(thread_out_V_V_write);
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_5_reg_396_pp1_iter1_reg );
    sensitive << ( ap_block_pp1_stage0_11001 );

    SC_METHOD(thread_outpix_1_fu_340_p2);
    sensitive << ( outpix_reg_265 );

    SC_METHOD(thread_tmp1_fu_323_p2);
    sensitive << ( tmp_V_reg_375 );
    sensitive << ( buf_V_q0 );

    SC_METHOD(thread_tmp_2_fu_314_p1);
    sensitive << ( xp_mid2_reg_369 );

    SC_METHOD(thread_tmp_3_fu_276_p2);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( yp_reg_232 );

    SC_METHOD(thread_tmp_5_fu_334_p2);
    sensitive << ( outpix_reg_265 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_tmp_7_fu_328_p2);
    sensitive << ( in_V_V_dout );
    sensitive << ( tmp1_fu_323_p2 );

    SC_METHOD(thread_tmp_8_fu_346_p1);
    sensitive << ( outpix_reg_265 );

    SC_METHOD(thread_tmp_s_fu_300_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( exitcond_flatten_fu_288_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_xp_phi_fu_258_p4 );

    SC_METHOD(thread_xp_1_fu_318_p2);
    sensitive << ( xp_mid2_reg_369 );

    SC_METHOD(thread_xp_mid2_fu_306_p3);
    sensitive << ( ap_phi_mux_xp_phi_fu_258_p4 );
    sensitive << ( tmp_s_fu_300_p2 );

    SC_METHOD(thread_yp_1_fu_282_p2);
    sensitive << ( yp_reg_232 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_3_fu_276_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( exitcond_flatten_fu_288_p2 );
    sensitive << ( tmp_5_fu_334_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "StreamingMaxPool_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V_V_dout, "(port)in_V_V_dout");
    sc_trace(mVcdFile, in_V_V_empty_n, "(port)in_V_V_empty_n");
    sc_trace(mVcdFile, in_V_V_read, "(port)in_V_V_read");
    sc_trace(mVcdFile, out_V_V_din, "(port)out_V_V_din");
    sc_trace(mVcdFile, out_V_V_full_n, "(port)out_V_V_full_n");
    sc_trace(mVcdFile, out_V_V_write, "(port)out_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_V_V_blk_n, "in_V_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, exitcond_flatten_reg_360, "exitcond_flatten_reg_360");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, out_V_V_blk_n, "out_V_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, tmp_5_reg_396, "tmp_5_reg_396");
    sc_trace(mVcdFile, tmp_5_reg_396_pp1_iter1_reg, "tmp_5_reg_396_pp1_iter1_reg");
    sc_trace(mVcdFile, indvar_flatten_reg_243, "indvar_flatten_reg_243");
    sc_trace(mVcdFile, xp_reg_254, "xp_reg_254");
    sc_trace(mVcdFile, outpix_reg_265, "outpix_reg_265");
    sc_trace(mVcdFile, tmp_3_fu_276_p2, "tmp_3_fu_276_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, yp_1_fu_282_p2, "yp_1_fu_282_p2");
    sc_trace(mVcdFile, yp_1_reg_355, "yp_1_reg_355");
    sc_trace(mVcdFile, exitcond_flatten_fu_288_p2, "exitcond_flatten_fu_288_p2");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter0, "ap_block_state9_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage0_iter1, "ap_block_state11_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond_flatten_reg_360_pp0_iter1_reg, "exitcond_flatten_reg_360_pp0_iter1_reg");
    sc_trace(mVcdFile, indvar_flatten_next_fu_294_p2, "indvar_flatten_next_fu_294_p2");
    sc_trace(mVcdFile, indvar_flatten_next_reg_364, "indvar_flatten_next_reg_364");
    sc_trace(mVcdFile, xp_mid2_fu_306_p3, "xp_mid2_fu_306_p3");
    sc_trace(mVcdFile, xp_mid2_reg_369, "xp_mid2_reg_369");
    sc_trace(mVcdFile, tmp_V_reg_375, "tmp_V_reg_375");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage1_iter0, "ap_block_state10_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage1_iter1, "ap_block_state12_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, buf_V_addr_2_reg_380, "buf_V_addr_2_reg_380");
    sc_trace(mVcdFile, xp_1_fu_318_p2, "xp_1_fu_318_p2");
    sc_trace(mVcdFile, xp_1_reg_386, "xp_1_reg_386");
    sc_trace(mVcdFile, tmp_7_fu_328_p2, "tmp_7_fu_328_p2");
    sc_trace(mVcdFile, tmp_7_reg_391, "tmp_7_reg_391");
    sc_trace(mVcdFile, tmp_5_fu_334_p2, "tmp_5_fu_334_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state14_pp1_stage0_iter0, "ap_block_state14_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state15_pp1_stage0_iter1, "ap_block_state15_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state16_pp1_stage0_iter2, "ap_block_state16_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, outpix_1_fu_340_p2, "outpix_1_fu_340_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, buf_V_addr_1_reg_405, "buf_V_addr_1_reg_405");
    sc_trace(mVcdFile, buf_V_q0, "buf_V_q0");
    sc_trace(mVcdFile, tmp_V_5_reg_411, "tmp_V_5_reg_411");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state9, "ap_condition_pp0_exit_iter0_state9");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state14, "ap_condition_pp1_exit_iter0_state14");
    sc_trace(mVcdFile, buf_V_address0, "buf_V_address0");
    sc_trace(mVcdFile, buf_V_ce0, "buf_V_ce0");
    sc_trace(mVcdFile, buf_V_we0, "buf_V_we0");
    sc_trace(mVcdFile, buf_V_address1, "buf_V_address1");
    sc_trace(mVcdFile, buf_V_ce1, "buf_V_ce1");
    sc_trace(mVcdFile, buf_V_we1, "buf_V_we1");
    sc_trace(mVcdFile, buf_V_d1, "buf_V_d1");
    sc_trace(mVcdFile, yp_reg_232, "yp_reg_232");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_phi_mux_indvar_flatten_phi_fu_247_p4, "ap_phi_mux_indvar_flatten_phi_fu_247_p4");
    sc_trace(mVcdFile, ap_phi_mux_xp_phi_fu_258_p4, "ap_phi_mux_xp_phi_fu_258_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_2_fu_314_p1, "tmp_2_fu_314_p1");
    sc_trace(mVcdFile, tmp_8_fu_346_p1, "tmp_8_fu_346_p1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_01001, "ap_block_pp1_stage0_01001");
    sc_trace(mVcdFile, tmp_s_fu_300_p2, "tmp_s_fu_300_p2");
    sc_trace(mVcdFile, tmp1_fu_323_p2, "tmp1_fu_323_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
}

StreamingMaxPool::~StreamingMaxPool() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete buf_V_U;
}

void StreamingMaxPool::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv64_0;
}

void StreamingMaxPool::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(tmp_3_fu_276_p2.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state9.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage1_subdone.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state9.read() ^ ap_const_logic_1);
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                    esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage1_subdone.read()))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(tmp_3_fu_276_p2.read(), ap_const_lv1_0) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state14.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state14.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state14.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read())) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            ap_enable_reg_pp1_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(tmp_3_fu_276_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        indvar_flatten_reg_243 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_flatten_reg_243 = indvar_flatten_next_reg_364.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        outpix_reg_265 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_334_p2.read()))) {
        outpix_reg_265 = outpix_1_fu_340_p2.read();
    }
    if ((esl_seteq<1,1,1>(tmp_3_fu_276_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        xp_reg_254 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        xp_reg_254 = xp_1_reg_386.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        yp_reg_232 = yp_1_reg_355.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        yp_reg_232 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_334_p2.read()))) {
        buf_V_addr_1_reg_405 =  (sc_lv<4>) (tmp_8_fu_346_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        buf_V_addr_2_reg_380 =  (sc_lv<4>) (tmp_2_fu_314_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_360 = exitcond_flatten_fu_288_p2.read();
        exitcond_flatten_reg_360_pp0_iter1_reg = exitcond_flatten_reg_360.read();
    }
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_flatten_next_reg_364 = indvar_flatten_next_fu_294_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_5_reg_396 = tmp_5_fu_334_p2.read();
        tmp_5_reg_396_pp1_iter1_reg = tmp_5_reg_396.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_7_reg_391 = tmp_7_fu_328_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_396.read()))) {
        tmp_V_5_reg_411 = buf_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        tmp_V_reg_375 = in_V_V_dout.read();
        xp_1_reg_386 = xp_1_fu_318_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_288_p2.read()))) {
        xp_mid2_reg_369 = xp_mid2_fu_306_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        yp_1_reg_355 = yp_1_fu_282_p2.read();
    }
}

void StreamingMaxPool::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[8];
}

void StreamingMaxPool::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[9];
}

void StreamingMaxPool::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[11];
}

void StreamingMaxPool::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void StreamingMaxPool::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[10];
}

void StreamingMaxPool::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[12];
}

void StreamingMaxPool::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void StreamingMaxPool::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void StreamingMaxPool::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void StreamingMaxPool::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void StreamingMaxPool::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void StreamingMaxPool::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void StreamingMaxPool::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void StreamingMaxPool::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingMaxPool::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read()));
}

void StreamingMaxPool::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read()));
}

void StreamingMaxPool::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingMaxPool::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read()));
}

void StreamingMaxPool::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read()));
}

void StreamingMaxPool::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingMaxPool::thread_ap_block_pp1_stage0_01001() {
    ap_block_pp1_stage0_01001 = (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_396_pp1_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read()));
}

void StreamingMaxPool::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_396_pp1_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read()));
}

void StreamingMaxPool::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_396_pp1_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read()));
}

void StreamingMaxPool::thread_ap_block_state10_pp0_stage1_iter0() {
    ap_block_state10_pp0_stage1_iter0 = (esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read()));
}

void StreamingMaxPool::thread_ap_block_state11_pp0_stage0_iter1() {
    ap_block_state11_pp0_stage0_iter1 = (esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read()));
}

void StreamingMaxPool::thread_ap_block_state12_pp0_stage1_iter1() {
    ap_block_state12_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingMaxPool::thread_ap_block_state14_pp1_stage0_iter0() {
    ap_block_state14_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingMaxPool::thread_ap_block_state15_pp1_stage0_iter1() {
    ap_block_state15_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingMaxPool::thread_ap_block_state16_pp1_stage0_iter2() {
    ap_block_state16_pp1_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_396_pp1_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read()));
}

void StreamingMaxPool::thread_ap_block_state9_pp0_stage0_iter0() {
    ap_block_state9_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void StreamingMaxPool::thread_ap_condition_pp0_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_288_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state9 = ap_const_logic_0;
    }
}

void StreamingMaxPool::thread_ap_condition_pp1_exit_iter0_state14() {
    if (esl_seteq<1,1,1>(tmp_5_fu_334_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state14 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state14 = ap_const_logic_0;
    }
}

void StreamingMaxPool::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(tmp_3_fu_276_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void StreamingMaxPool::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void StreamingMaxPool::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void StreamingMaxPool::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void StreamingMaxPool::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void StreamingMaxPool::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void StreamingMaxPool::thread_ap_phi_mux_indvar_flatten_phi_fu_247_p4() {
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_indvar_flatten_phi_fu_247_p4 = indvar_flatten_next_reg_364.read();
    } else {
        ap_phi_mux_indvar_flatten_phi_fu_247_p4 = indvar_flatten_reg_243.read();
    }
}

void StreamingMaxPool::thread_ap_phi_mux_xp_phi_fu_258_p4() {
    if ((esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_xp_phi_fu_258_p4 = xp_1_reg_386.read();
    } else {
        ap_phi_mux_xp_phi_fu_258_p4 = xp_reg_254.read();
    }
}

void StreamingMaxPool::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(tmp_3_fu_276_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void StreamingMaxPool::thread_buf_V_address0() {
    if ((esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1))) {
        buf_V_address0 =  (sc_lv<4>) (tmp_8_fu_346_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        buf_V_address0 =  (sc_lv<4>) (tmp_2_fu_314_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        buf_V_address0 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        buf_V_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        buf_V_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buf_V_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        buf_V_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        buf_V_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        buf_V_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        buf_V_address0 = "XXXX";
    }
}

void StreamingMaxPool::thread_buf_V_address1() {
    if ((esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        buf_V_address1 = buf_V_addr_1_reg_405.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1))) {
        buf_V_address1 = buf_V_addr_2_reg_380.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        buf_V_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        buf_V_address1 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        buf_V_address1 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buf_V_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        buf_V_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        buf_V_address1 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        buf_V_address1 =  (sc_lv<4>) (ap_const_lv64_1);
    } else {
        buf_V_address1 = "XXXX";
    }
}

void StreamingMaxPool::thread_buf_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        buf_V_ce0 = ap_const_logic_1;
    } else {
        buf_V_ce0 = ap_const_logic_0;
    }
}

void StreamingMaxPool::thread_buf_V_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)))) {
        buf_V_ce1 = ap_const_logic_1;
    } else {
        buf_V_ce1 = ap_const_logic_0;
    }
}

void StreamingMaxPool::thread_buf_V_d1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1))) {
        buf_V_d1 = tmp_7_reg_391.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                (esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())))) {
        buf_V_d1 = ap_const_lv64_0;
    } else {
        buf_V_d1 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void StreamingMaxPool::thread_buf_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        buf_V_we0 = ap_const_logic_1;
    } else {
        buf_V_we0 = ap_const_logic_0;
    }
}

void StreamingMaxPool::thread_buf_V_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_396.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_360_pp0_iter1_reg.read())))) {
        buf_V_we1 = ap_const_logic_1;
    } else {
        buf_V_we1 = ap_const_logic_0;
    }
}

void StreamingMaxPool::thread_exitcond_flatten_fu_288_p2() {
    exitcond_flatten_fu_288_p2 = (!ap_phi_mux_indvar_flatten_phi_fu_247_p4.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_indvar_flatten_phi_fu_247_p4.read() == ap_const_lv5_1C);
}

void StreamingMaxPool::thread_in_V_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        in_V_V_blk_n = in_V_V_empty_n.read();
    } else {
        in_V_V_blk_n = ap_const_logic_1;
    }
}

void StreamingMaxPool::thread_in_V_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(exitcond_flatten_reg_360.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_V_read = ap_const_logic_1;
    } else {
        in_V_V_read = ap_const_logic_0;
    }
}

void StreamingMaxPool::thread_indvar_flatten_next_fu_294_p2() {
    indvar_flatten_next_fu_294_p2 = (!ap_phi_mux_indvar_flatten_phi_fu_247_p4.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(ap_phi_mux_indvar_flatten_phi_fu_247_p4.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void StreamingMaxPool::thread_out_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_396_pp1_iter1_reg.read()))) {
        out_V_V_blk_n = out_V_V_full_n.read();
    } else {
        out_V_V_blk_n = ap_const_logic_1;
    }
}

void StreamingMaxPool::thread_out_V_V_din() {
    out_V_V_din = tmp_V_5_reg_411.read();
}

void StreamingMaxPool::thread_out_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_reg_396_pp1_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        out_V_V_write = ap_const_logic_1;
    } else {
        out_V_V_write = ap_const_logic_0;
    }
}

void StreamingMaxPool::thread_outpix_1_fu_340_p2() {
    outpix_1_fu_340_p2 = (!outpix_reg_265.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(outpix_reg_265.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void StreamingMaxPool::thread_tmp1_fu_323_p2() {
    tmp1_fu_323_p2 = (tmp_V_reg_375.read() | buf_V_q0.read());
}

void StreamingMaxPool::thread_tmp_2_fu_314_p1() {
    tmp_2_fu_314_p1 = esl_zext<64,4>(xp_mid2_reg_369.read());
}

void StreamingMaxPool::thread_tmp_3_fu_276_p2() {
    tmp_3_fu_276_p2 = (!yp_reg_232.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<1>(): sc_lv<1>(yp_reg_232.read() == ap_const_lv4_E);
}

void StreamingMaxPool::thread_tmp_5_fu_334_p2() {
    tmp_5_fu_334_p2 = (!outpix_reg_265.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<1>(): sc_lv<1>(outpix_reg_265.read() == ap_const_lv4_E);
}

void StreamingMaxPool::thread_tmp_7_fu_328_p2() {
    tmp_7_fu_328_p2 = (tmp1_fu_323_p2.read() | in_V_V_dout.read());
}

void StreamingMaxPool::thread_tmp_8_fu_346_p1() {
    tmp_8_fu_346_p1 = esl_zext<64,4>(outpix_reg_265.read());
}

void StreamingMaxPool::thread_tmp_s_fu_300_p2() {
    tmp_s_fu_300_p2 = (!ap_phi_mux_xp_phi_fu_258_p4.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_xp_phi_fu_258_p4.read() == ap_const_lv4_E);
}

void StreamingMaxPool::thread_xp_1_fu_318_p2() {
    xp_1_fu_318_p2 = (!xp_mid2_reg_369.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(xp_mid2_reg_369.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void StreamingMaxPool::thread_xp_mid2_fu_306_p3() {
    xp_mid2_fu_306_p3 = (!tmp_s_fu_300_p2.read()[0].is_01())? sc_lv<4>(): ((tmp_s_fu_300_p2.read()[0].to_bool())? ap_const_lv4_0: ap_phi_mux_xp_phi_fu_258_p4.read());
}

void StreamingMaxPool::thread_yp_1_fu_282_p2() {
    yp_1_fu_282_p2 = (!yp_reg_232.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(yp_reg_232.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void StreamingMaxPool::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(tmp_3_fu_276_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 256 : 
            if ((!(esl_seteq<1,1,1>(exitcond_flatten_fu_288_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(exitcond_flatten_fu_288_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 512 : 
            if ((!(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage1_subdone.read())) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage1_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage1_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 2048 : 
            if ((!(esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(tmp_5_fu_334_p2.read(), ap_const_lv1_1)) && !(esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(tmp_5_fu_334_p2.read(), ap_const_lv1_1)))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

}

